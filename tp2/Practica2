

        #############################################################################################

                                        Introducción a NACHOS


                Responda a las siguientes preguntas en base al código de NACHOS.

        #############################################################################################


    1. ¿Cuánta memoria tiene la máquina simulada para NACHOS?

En disk.h se define SectorSize = 128 que representa la cantidad de bytes por sector de disco.
Luego en machine.h se define
const int PageSize = SectorSize;        // set the page size equal to
                                        // the disk sector size, for
                                        // simplicity

const int NumPhysPages = 32;
const int MemorySize = NumPhysPages * PageSize;

En machine.cc:
    mainMemory = new char[MemorySize];

Por lo tanto, la memoria física es de 32 * 8 bytes = 4096 bytes = 4KB


        #############################################################################################


    2. ¿Cómo cambiaría ese valor?

Aumentando el número de páginas físicas (cambiando el valor de NumPhysPages definido en machine.h)


        #############################################################################################


    3. ¿De qué tamaño es un disco?

Definido en disk.h:
        const int SectorSize = 128;     // number of bytes per disk sector
        const int SectorsPerTrack = 32; // number of sectors per disk track 
        const int NumTracks = 32;       // number of tracks per disk
        const int NumSectors = SectorsPerTrack * NumTracks;
        
Definido en disk.cc:
        #define MagicNumber     0x456789ab
        #define MagicSize       sizeof(int)
        
        #define DiskSize        (MagicSize + (NumSectors * SectorSize))

Concluimos que: 
El tamaño del archivo que contiene al disco es de sizeof(int) + 1024*128 bytes = sizeof(int) + 131072 bytes
En mi máquina el tamaño del int es 4 bytes por lo que el tamaño del archivo del disco resulta 131076 bytes.

Los 4 bytes para el entero se reservan para almacenar un número (llamado MagicNumber) que identifique al 
archivo y no sea confundido con otro archivo que no sea disco de nachos, por lo que no forma parte útil del
disco.
El tamaño del disco es encontes 131072 bytes = 128 KB
 

        #############################################################################################

    4. ¿Cuántas instrucciones del MIPS simula NACHOS?

En mipssim.h se definen 60 opcode de MIPS.
Las implementaciones de estas instrucciones están dentro de la función Machine::OneInstruction en mipssim.cc


        #############################################################################################


    5. Explicar el código que procesa la instrucción ''add''

Extraído de mipssim.cc:

  case OP_ADD:
    sum = registers[(int)instr->rs] + registers[(int)instr->rt];
    if (!((registers[(int)instr->rs] ^ registers[(int)instr->rt]) & SIGN_BIT) &&
        ((registers[(int)instr->rs] ^ sum) & SIGN_BIT)) {
        RaiseException(OverflowException, 0);
        return;
    }
    registers[(int)instr->rd] = sum;
    break;

Primero se decodifica la instrucción, con lo que se obtienen los números de registros fuentes (rs y rt) 
y el número de registro destino (rd).
Se suman los enteros que actualmente están en los registros rs y rt, y se guarda el resultado en la 
variable sum.
Se comprueba si hubo overflow.
Si ambos operandos tienen el mismo signo pero distinto al signo del resultado es porque hubo overflow.
En ese caso, se lanza una excepción del tipo OverflowException.
Si no hubo overflow, se guarda el resultado de la suma en el registro rd.


        ############################################################################################


    6. Nombrar los archivos fuente en los que figuran las funciones y métodos llamados por el main de NACHOS
al ejecutarlo en el directorio threads (hasta dos niveles de profundidad).

int main(int argc, char **argv) // threads/main.cc
    void DEBUG(char flag, const char *format, ...) // threads/utility.cc
        bool DebugIsEnabled(char flag) // threads/utility.cc
    void Initialize(int argc, char **argv) // threads/system.cc
        void DebugInit(const char *flagList) // threads/utility.cc
        Statistics::Statistics() // machine/stats.cc
        Interrupt::Interrupt() // machine/interrupt.cc
        Scheduler::Scheduler() // threads/scheduler.cc
        Timer::Timer(VoidFunctionPtr timerHandler, void* callArg, bool doRandom) // machine/timer.cc
        Thread::Thread(const char* threadName) // threads/thread.cc
        void Thread::setStatus(ThreadStatus st) // threads/thread.h
        void Interrupt::Enable() // machine/interrupt.cc
        void CallOnUserAbort(VoidNoArgFunctionPtr func) // machine/sysdep.cc
    void ThreadTest() // threads/threadtest.cc
        void DEBUG(char flag, const char *format, ...) // threads/utility.cc
        Thread::Thread(const char* threadName) // threads/thread.cc
        void Thread::Fork(VoidFunctionPtr func, void* arg) // threads/thread.cc
        void SimpleThread(void* name) // threads/threadtest.cc
    void Thread::Finish() // threads/thread.cc
        IntStatus Interrupt::SetLevel(IntStatus now) // machine/interrupt.cc
        const char* getName() // threads/thread.h
        void DEBUG(char flag, const char *format, ...) // threads/utility.cc
        void Thread::Sleep() // threads/threas.cc

        
        #############################################################################################


    7. ¿Porqué se prefiere emular una CPU en vez de utilizar directamente la CPU existente?

El sistema operativo de Nachos se desarrolló con fines educativos. Al emular una CPU se puede tener 
mayor control en la ejecución de los programas de usuario y se facilita su depuración. Adicionalmente,
la arquitectura MIPS simulada es más sencilla por ser de tipo RISC.


        #############################################################################################


    8. Probar el efecto de las distintas banderas de debug.

Se probaron las siguientes banderas:
    ’+’ - muestra todos los mensajes de debug.
    ’t’ - mensajes correspondiente a los threads.
    ’s’ - mensajes relacionados con semáforos, locks y condiciones.
    ’i’ - emulación de interrupciones.
    ’m’ - emulación de la máquina que ejecuta los programas de usuario. (USER_PROGRAM)
    ’d’ - emulación del disco. (FILESYS)
    ’f’ - sistema de archivos. (FILESYS)
    ’a’ - espacio de direcciones. (USER_PROGRAM)
    ’n’ - emulación de la red (NETWORK)


        #############################################################################################


    9. ¿Qué efecto hacen las macros ASSERT y DEBUG definidas en ''utility.h''?

//----------------------------------------------------------------------
// ASSERT
//      If condition is false,  print a message and dump core.
//      Useful for documenting assumptions in the code.
//
//      NOTE: needs to be a #define, to be able to print the location 
//      where the error occurred.
//----------------------------------------------------------------------
#define ASSERT(condition)                                                     \
    if (!(condition)) {                                                       \
        fprintf(stderr, "Assertion failed: line %d, file \"%s\"\n",           \
                __LINE__, __FILE__);                                          \
        fflush(stderr);                                                       \
        Abort();                                                              \
    }

Si la condición pasada a ASSERT es distinta de 0 entonces todo sigue su curso normal
Si la condición es falsa, imprime un mensaje de error y termina el programa.
Se usa para verificar que se cumplan ciertas condiciones en distintas partes del programa.

De utility.cc:

//----------------------------------------------------------------------
// DEBUG
//      Print a debug message, if flag is enabled.  Like printf,
//      only with an extra argument on the front.
//----------------------------------------------------------------------

void
DEBUG(char flag, const char *format, ...)
{
    if (DebugIsEnabled(flag)) {
        va_list ap;
        // You will get an unused variable message here -- ignore it.
        va_start(ap, format);
        vfprintf(stdout, format, ap);
        va_end(ap);
        fflush(stdout);
    }
}

DEBUG imprime mensajes dependiendo de las banderas activadas por medio de la línea de 
comandos al iniciar nachos.
Es similar a un printf condicionado por la bandera que se le pasa como primer argumento.


        #############################################################################################


    10. ¿Dónde están definidas las constantes USER_PROGRAM, FILESYS_NEEDED, FILESYS_STUB y NETWORK?

Se definen en tiempo de compilación con la opción -D
En el archivo Makefile.common se agrega $(DEFINES) a las banderas de compilación
Cada subcarpeta (threads, userprog, vm, filesys y network) especifica el valor de DEFINES

- USER_PROGRAM:
        filesys/Makefile
        network/Makefile
        userprog/Makefile
        vm/Makefile

- FILESYS_NEEDED     
        filesys/Makefile
        network/Makefile
        userprog/Makefile
        vm/Makefile

- FILESYS_STUB 
        userprog/Makefile
        vm/Makefile

- NETWORK
        network/Makefile


        #############################################################################################


    11. ¿Cuál es la diferencia entre las clases ''list'' y ''synchlist''?

Ambas implementan una lista enlazada simple pero ''synchlist'' fuerza acceso exclusivo a la lista por los
diferentes hilos. Esto se implementa envolviendo a la implementación de ''list'' con rutinas de sincronización.
Para esto se utiliza un lock y una variable de condición. Los hilos que intentes eliminar un elemento de 
la lista, quedarán bloqueados si la lista esta vacía hasta que tenga algún elemento. Solo un hilo podrá tener
acceso a la lista a la vez.
 

        #############################################################################################


    12. ¿En qué archivos está definida la función ''main''? ¿en qué archivo está definida la función ''main'' 
del ejecutable ''nachos'' del directorio ''userprog''?

La función ''main'' está definida en los varios archivos de la carpeta bin (coff2flat.c, coff2noff.c, disasm.c,
main.c, out.c), en los programas de usuario definidos en la carpeta test (halt.c, matmult.c, shell.c, sort.c) y 
el main del ejecutable de nachos en threads/main.cc.


        #############################################################################################


    13. ¿Qué línea de comandos soporta NACHOS? ¿qué efecto hace la opción ''-rs''?

Nachos soporta las siguientes opciones de línea de comandos:
    -d <debug flag>
    -rs <random seed #> (provoca que se ejecute Yield repetidamente en lugares aleatorios)
    -s (ejecución en single step mode)
    -x <nachos file> (ejecución de programa de usuario)
    -c <console in> <console out> (prueba de la consola)
    -f (formatea el disco físico)
    -cp <unix file> <nachos file> (copia un archivo unix a nachos)
    -p <nachos file> (imprime el archivo de nachos en stdout)
    -r <nachos file> (elimina el archivo de nachos del disco)
    -l (lista el contenido del directorio de nachos)
    -D (imprime el contenido del disco completo)
    -t (prueba el sistema de archivos de nachos)

La opción '-rs' permite interrumpir el hilo actual de ejecución (con Yield) en intervalos aleatorios dejando
lugar a la ejecución de otro thread. El hilo que cedió lugar podrá ser retomado posteriormente.


        #############################################################################################


    14. Modificar el ejemplo del directorio threads para que se generen 5 threads en lugar de 2.

Para generar 5 threads, se modifica la condición del for de ThreadTest a k<=4.
De esta manera, el for crea 4 hilos, estos más el hilo actual suman un total de 5.

void
ThreadTest()
{
    DEBUG('t', "Entering SimpleTest");

    for ( int k=1; k<=4; k++) {
      char* threadname = new char[100];
      sprintf(threadname, "Hilo %d", k);
      Thread* newThread = new Thread (threadname);
      newThread->Fork (SimpleThread, (void*)threadname);
    }
    
    SimpleThread( (void*)"Hilo 0");
}

Alumno : Ismael Ait